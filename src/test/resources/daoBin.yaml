packageName: com.example.emsql
className: DaoBinary
declare:
  idBinary: long
  binary01: Binary?
  binary02: Binary?
  binary03: Binary?
  binary04: Binary?
  binary11: Binary
  binary12: Binary
  binary13: Binary
  binary14: Binary
methods:
  - methodName: insert01
    perform: !Insert
      execSql: |
        insert into tbinary (
          binary01,
          binary11
        ) values (
          :binary01,
          :binary11 
        )
  - methodName: insert02
    perform: !Insert
      timeout: 5
      execSql: |
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        )
  - methodName: insert02R
    perform: !Insert
      input:
        reflect: yes
      execSql: |
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        )
  - methodName: insert02K
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        ) 
        returning binary13 into :binary13;
        end;

  - methodName: insert12K
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        ) 
        returning binary03 into :binary03;
        end;

  - methodName: insert02K2
    perform: !InlineProcedure
      timeout: 5
      execSql: |
        begin
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        ) 
        returning binary13, binary14 
        into :binary13, :binary14;
        end;

  - methodName: insert12K2
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tbinary (
          binary01,
          binary02,
          binary11,
          binary12
        ) values (
          :binary01,
          :binary02,
          :binary11,
          :binary12 
        ) 
        returning binary03, binary04 
        into :binary03, :binary04;
        end;

  - methodName: findBinaryAny
    perform: !SelectOptional
      execSql: |
        select
          binary01,
          binary11
        into
          :binary01,
          :binary11 
        from tbinary
        where id_Binary = :idBinary

  - methodName: findBinaryAnyD
    perform: !SelectOptional
      output:
        delegate: yes
      execSql: |
        select
          binary01,
          binary11
        into
          :binary01,
          :binary11 
        from tbinary
        where id_Binary = :idBinary

  - methodName: findBinaryAny01
    perform: !SelectOptional
      execSql: |
        select
          binary01
        into
          :binary01
        from tbinary
        where binary02 = :binary02

  - methodName: findBinaryAny11
    perform: !SelectOptional
      execSql: |
        select
          binary11
        into
          :binary11
        from tbinary
        where binary12 = :binary12

  - methodName: findBinaryAnyR
    perform: !SelectOptional
      output:
        reflect: yes
      execSql: |
        select
          binary01,
          binary11
        into
          :binary01,
          :binary11 
        from tbinary
        where id_Binary = :idBinary

  - methodName: call01
    perform: !CallProcedure
      output:
        fields:
          - binary02
          - binary12
      execSql: |
        call solve(:binary01, :binary11, :binary02, :binary12)

  - methodName: call02
    perform: !CallProcedure
      input:
        reflect: yes
      output:
        reflect: yes
        fields:
          - binary02
          - binary12
      execSql: |
        call solve(:binary01, :binary11, 
                   :binary03, :binary13,
                   :binary04, :binary14,
                   :binary02, :binary12)
