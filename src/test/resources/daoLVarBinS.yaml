packageName: com.example.emsql
className: DaoLongVarBinaryStream
declare:
  idLongVarBinaryStream: long
  varBinary01: LongVarBinaryStream?
  varBinary02: LongVarBinaryStream?
  varBinary03: LongVarBinaryStream?
  varBinary04: LongVarBinaryStream?
  varBinary11: LongVarBinaryStream
  varBinary12: LongVarBinaryStream
  varBinary13: LongVarBinaryStream
  varBinary14: LongVarBinaryStream
methods:
  - methodName: insert01
    perform: !Insert
      execSql: |
        insert into tvarBinary (
          varBinary01,
          varBinary11
        ) values (
          :varBinary01,
          :varBinary11 
        )
  - methodName: insert02
    perform: !Insert
      timeout: 5
      execSql: |
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        )
  - methodName: insert02R
    perform: !Insert
      input:
        reflect: yes
      execSql: |
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        )
  - methodName: insert02K
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        ) 
        returning varBinary13 into :varBinary13;
        end;

  - methodName: insert12K
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        ) 
        returning varBinary03 into :varBinary03;
        end;

  - methodName: insert02K2
    perform: !InlineProcedure
      timeout: 5
      execSql: |
        begin
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        ) 
        returning varBinary13, varBinary14 
        into :varBinary13, :varBinary14;
        end;

  - methodName: insert12K2
    perform: !InlineProcedure
      execSql: |
        begin
        insert into tvarBinary (
          varBinary01,
          varBinary02,
          varBinary11,
          varBinary12
        ) values (
          :varBinary01,
          :varBinary02,
          :varBinary11,
          :varBinary12 
        ) 
        returning varBinary03, varBinary04 
        into :varBinary03, :varBinary04;
        end;

  - methodName: findLongVarBinaryStreamAny
    perform: !SelectOptional
      execSql: |
        select
          varBinary01,
          varBinary11
        into
          :varBinary01,
          :varBinary11 
        from tvarBinary
        where id_LongVarBinaryStream = :idLongVarBinaryStream

  - methodName: findLongVarBinaryStreamAnyD
    perform: !SelectOptional
      output:
        delegate: yes
      execSql: |
        select
          varBinary01,
          varBinary11
        into
          :varBinary01,
          :varBinary11 
        from tvarBinary
        where id_LongVarBinaryStream = :idLongVarBinaryStream

  - methodName: findLongVarBinaryStreamAny01
    perform: !SelectOptional
      execSql: |
        select
          varBinary01
        into
          :varBinary01
        from tvarBinary
        where varBinary02 = :varBinary02

  - methodName: findLongVarBinaryStreamAny11
    perform: !SelectOptional
      execSql: |
        select
          varBinary11
        into
          :varBinary11
        from tvarBinary
        where varBinary12 = :varBinary12

  - methodName: findLongVarBinaryStreamAnyR
    perform: !SelectOptional
      output:
        reflect: yes
      execSql: |
        select
          varBinary01,
          varBinary11
        into
          :varBinary01,
          :varBinary11 
        from tvarBinary
        where id_LongVarBinaryStream = :idLongVarBinaryStream

  - methodName: call01
    perform: !CallProcedure
#      output:
#        fields:
#          - varBinary02
#          - varBinary12
      execSql: |
        call solve(:varBinary01, :varBinary11, :varBinary02, :varBinary12)

  - methodName: call02
    perform: !CallProcedure
      input:
        reflect: yes
      output:
        reflect: yes
#        fields:
#          - varBinary02
#          - varBinary12
      execSql: |
        call solve(:varBinary01, :varBinary11,
                   :varBinary03, :varBinary13,
                   :varBinary04, :varBinary14,
                   :varBinary02, :varBinary12)
